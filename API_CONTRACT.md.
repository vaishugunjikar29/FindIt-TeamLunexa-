**Base URL** (local):
```
http://localhost:5000/api
```

---

## Data Models

### User (placeholder)
```json
{
  "id": 1,
  "username": "john_doe",
  "email": "john@example.com",
  "phone": "+91-9876543210"
}
```

### Item
```json
{
  "id": 101,
  "title": "Black Leather Wallet",
  "description": "Contains ID cards and cash",
  "category": "Wallet",
  "status": "Lost",
  "date": "2025-08-05",
  "location": "Mumbai Central Station",
  "image_url": "https://example.com/wallet.jpg",
  "posted_by": 1
}
```

### Report (placeholder)
```json
{
  "id": 501,
  "item_id": 101,
  "report_type": "Lost",
  "description": "Lost wallet near platform 3",
  "reported_by": 1,
  "contact_info": "+91-9876543210",
  "status": "Open",
  "created_at": "2025-08-05T10:30:00Z"
}
```

### Notification (placeholder)
```json
{
  "id": 301,
  "user_id": 1,
  "message": "Your lost wallet has a potential match found near Churchgate Station",
  "is_read": false,
  "created_at": "2025-08-06T15:45:00Z"
}
```

### Comment (placeholder)
```json
{
  "id": 201,
  "item_id": 101,
  "comment_text": "I saw a wallet matching this description at the station help desk.",
  "posted_by": 2,
  "created_at": "2025-08-05T14:20:00Z"
}
```

> Note: The backend currently implements only the **Item** endpoints and stores Item objects in-memory. User/Report/Notification/Comment are documented for future use.

---

## API Endpoints (implemented)

### 1. Get All Items
- **Method:** `GET`
- **Path:** `/api/items`
- **Description:** Returns a compact list of all items. Each entry includes: `id`, `title`, `category`, `status`, `date`, `location`.
- **Success (200):**
```json
[
  {
    "id": 101,
    "title": "Black Leather Wallet",
    "category": "Wallet",
    "status": "Lost",
    "date": "2025-08-05",
    "location": "Mumbai Central Station"
  }
]
```
- **Error (404) — when no items:**
```json
{ "error": "No items found" }
```

---

### 2. Get Item by ID
- **Method:** `GET`
- **Path:** `/api/items/{id}`
- **Description:** Retrieves full details of a specific item.
- **Success (200):**
```json
{
  "id": 101,
  "title": "Black Leather Wallet",
  "description": "Contains ID cards and cash",
  "category": "Wallet",
  "status": "Lost",
  "date": "2025-08-05",
  "location": "Mumbai Central Station",
  "image_url": "https://example.com/wallet.jpg",
  "posted_by": 1
}
```
- **Error (404):**
```json
{ "error": "Item not found" }
```

---

### 3. Post New Item
- **Method:** `POST`
- **Path:** `/api/items`
- **Description:** Create a new lost/found item.
- **Request body (required):**
```json
{
  "title": "Black Leather Wallet",
  "description": "Contains ID cards and cash",    // optional
  "category": "Wallet",
  "status": "Lost",
  "date": "2025-08-05",
  "location": "Mumbai Central Station",
  "image_url": "https://example.com/wallet.jpg", // optional
  "posted_by": 1
}
```
- **Success (201):**
```json
{ "message": "Item posted successfully", "item_id": 101 }
```
- **Error (400) — missing required fields:**
```json
{ "error": "Invalid item data" }
```

**Validation rule:** `title`, `category`, `status`, `date`, `location`, and `posted_by` are required.

---

### 4. Update Item Status
- **Method:** `PUT`
- **Path:** `/api/items/{id}`
- **Description:** Update only the `status` of the item.
- **Request body:**
```json
{ "status": "Found" }
```
- **Success (200):**
```json
{ "message": "Item status updated successfully" }
```
- **Errors:**
- `400 Bad Request` if `status` missing:
```json
{ "error": "Invalid item data" }
```
- `404 Not Found` if item does not exist:
```json
{ "error": "Item not found" }
```

---

### 5. Delete an Item
- **Method:** `DELETE`
- **Path:** `/api/items/{id}`
- **Description:** Delete an item by ID.
- **Success (200):**
```json
{ "message": "Item deleted successfully" }
```
- **Error (404):**
```json
{ "error": "Item not found" }
```

---

## Swagger / Docs
- **URL:** `http://localhost:5000/api-docs`
- The backend exposes Swagger UI generated from route annotations matching these request/response shapes.

---

## Implementation notes
- Data is stored in-memory (array). Restarting the server clears all items.
- The `/api/items` GET returns a compact list as described above.
- Only `Item` endpoints are implemented in this version.

---

## Next steps
- Add a seeded sample item (so `GET /api/items` returns data immediately) — recommended for demos.
- Implement the User/Report/Notification/Comment endpoints if you want a fuller prototype.
- I can create a pull request with this exact file to your GitHub if you provide repo access or a branch name.
